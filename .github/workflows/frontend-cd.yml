name: CD - Deploy Frontend to AKS

on:
  workflow_dispatch:
    inputs:
      product_api_ip:
        description: "External IP of Product Service"
        required: true
      order_api_ip:
        description: "External IP of Order Service"
        required: true
      aks_cluster_name:
        description: "Name of the AKS Cluster to deploy to"
        required: true
      aks_resource_group:
        description: "Resource Group of the AKS Cluster"
        required: true

  workflow_call:
    inputs:
      product_api_ip:
        required: true
        type: string
      order_api_ip:
        required: true
        type: string
      aks_cluster_name:
        required: true
        type: string
      aks_resource_group:
        required: true
        type: string

jobs:
  deploy_frontend:
    runs-on: ubuntu-latest
    environment: Production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Docker login using ACR credentials (not az acr login)
      - name: Docker Login to ACR
        run: echo "${{ secrets.ACR_PASSWORD }}" | docker login ${{ secrets.ACR_LOGIN_SERVER }} -u "${{ secrets.ACR_USERNAME }}" --password-stdin

      - name: Inject Backend IPs into Frontend Config
        run: |
          echo "Injecting Product & Order IPs into frontend config..."
          sed -i "s|_PRODUCT_API_URL_|${{ inputs.product_api_ip }}|g" frontend/main.js
          sed -i "s|_ORDER_API_URL_|${{ inputs.order_api_ip }}|g" frontend/main.js
          echo "--- Modified file ---"
          cat frontend/main.js || true
          echo "---------------------"

      - name: Build and Push Frontend Image
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/frontend:latest ./frontend/
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/frontend:latest

      - name: Set Kubernetes context (kubeconfig from secret)
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG_BASE64 }}" | base64 --decode > $HOME/.kube/config

      - name: Deploy Frontend to AKS
        run: |
          echo "Deploying frontend with latest image..."
          kubectl apply -f k8s/frontend.yaml

      - name: Logout from Docker
        run: docker logout ${{ secrets.ACR_LOGIN_SERVER }}
