name: CD - Deploy Backend Services to AKS

on:
  workflow_call:
    inputs:
      aks_cluster_name: { required: true, type: string }
      aks_resource_group: { required: true, type: string }
      aks_acr_name: { required: true, type: string }
  workflow_dispatch:
    inputs:
      aks_cluster_name:
        { description: "AKS name", required: true, default: "<aks_name>" }
      aks_resource_group:
        { description: "AKS RG", required: true, default: "<rg>" }
      aks_acr_name:
        { description: "ACR name", required: true, default: "<acr>" }

concurrency:
  group: backend-cd-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    environment: Production

    outputs:
      PRODUCT_API_IP: ${{ steps.get_product_ip.outputs.external_ip }}
      ORDER_API_IP: ${{ steps.get_order_ip.outputs.external_ip }}

    steps:
      - uses: actions/checkout@v4

      - name: Azure Login (Service Principal)
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set Kube Context
        run: |
          az aks get-credentials \
            --resource-group ${{ inputs.aks_resource_group || github.event.inputs.aks_resource_group }} \
            --name ${{ inputs.aks_cluster_name || github.event.inputs.aks_cluster_name }} \
            --overwrite-existing

      - name: Attach ACR
        run: |
          az aks update \
            --name ${{ inputs.aks_cluster_name || github.event.inputs.aks_cluster_name }} \
            --resource-group ${{ inputs.aks_resource_group || github.event.inputs.aks_resource_group }} \
            --attach-acr ${{ inputs.aks_acr_name || github.event.inputs.aks_acr_name }}

      - name: Apply Infra
        run: |
          kubectl apply -f k8s/configmaps.yaml
          kubectl apply -f k8s/secrets.yaml
          kubectl apply -f k8s/product-db.yaml
          kubectl apply -f k8s/order-db.yaml

      - name: Apply Services
        run: |
          kubectl apply -f k8s/product-service.yaml
          kubectl apply -f k8s/order-service.yaml
          kubectl rollout status deploy/product-service-w08e1 --timeout=180s || true
          kubectl rollout status deploy/order-service-w08e1   --timeout=180s || true

      - name: Wait for LoadBalancer IPs
        run: |
          for i in $(seq 1 60); do
            PIP=$(kubectl get svc product-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            OIP=$(kubectl get svc order-service-w08e1   -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [[ -n "$PIP" && -n "$OIP" ]]; then
              echo "PRODUCT_IP=$PIP" >> $GITHUB_ENV
              echo "ORDER_IP=$OIP" >> $GITHUB_ENV
              break
            fi
            sleep 5
          done
          [[ -z "$PRODUCT_IP" || -z "$ORDER_IP" ]] && echo "IPs not ready" && exit 1 || true

      - id: get_product_ip
        run: echo "external_ip=${{ env.PRODUCT_IP }}" >> $GITHUB_OUTPUT

      - id: get_order_ip
        run: echo "external_ip=${{ env.ORDER_IP }}" >> $GITHUB_OUTPUT

      - name: Logout Azure
        if: always()
        run: az logout
